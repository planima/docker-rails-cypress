name: generate
on: push
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
      - id: matrix
        run: |
          TMP=$(curl "https://hub.docker.com/v2/namespaces/cimg/repositories/ruby/tags?page_size=10")
          echo $TMP
          echo "---"
          TMP=$(echo "$TMP" | jq -r '.results[].name')
          echo "$TMP"
          echo "---"
          TMP=$(echo "$TMP" | grep -E '^[0-9\.]+$')
          echo "$TMP"
          echo "Checking branches..."
          echo
          echo "$TMP" | while read -r version; do
            echo "Checking $version."
            echo
            if git ls-remote --heads origin chore/ruby-$version | grep -q chore/ruby-$version; then
              echo " - Skipping $version, branch already exists."
              TMP=$(echo "$TMP" | sed "s/$version//")
            else
              echo " - Adding $version to matrix."
            fi
          done
          echo "Set matrix output..."
          if [ -n "$TMP" ]; then
            TMP=$(echo "$TMP" | tr ' ' '\n' | jq -R . | jq -s .)
          else
            TMP="[]"
          fi
          echo "value=$TMP" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.matrix.outputs.value }}"
  build:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{fromJSON(needs.setup.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
      - run: |
          git config user.email "bot@planima.se"
          git config user.name "Planibot"
          git config push.autoSetupRemote true
      - run: |
          git checkout -b chore/ruby-${{ matrix.value }} && \
          echo "${{ matrix.value }}" > .ruby-version && \
          git commit -am "New Ruby version" && \
          git push
