name: generate
on: push
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
      - name: Fetch available Ruby versions from DockerHub
        run: |
          VERSIONS=$(curl 'https://hub.docker.com/v2/namespaces/cimg/repositories/ruby/tags?page_size=10' | jq -r '.results[].name' | grep -E '^[0-9\.]+$')

          echo "$VERSIONS"
          echo -e "VERSIONS<<EOF\n$VERSIONS\nEOF" >> "$GITHUB_ENV"
      - name: Filter existing versions
        run: |
          for version in $(echo "$VERSIONS"); do
            if git ls-remote --heads origin chore/ruby-$version | grep -q chore/ruby-$version; then
              VERSIONS=$(echo "$TMP" | sed "/^$version$/d")
            fi
          done

          echo "$VERSIONS"
          echo -e "VERSIONS<<EOF\n$VERSIONS\nEOF" >> "$GITHUB_ENV"
      - name: Set matrix output
        id: matrix
        run: |
          if [ -n "$VERSIONS" ]; then
            VERSIONS=$(echo "$VERSIONS" | tr ' ' '\n' | jq -R . | jq -sc .)
          else
            VERSIONS="[]"
          fi
          echo "Output: $VERSIONS"

          echo "value=$VERSIONS" >> $GITHUB_OUTPUT
  build:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{fromJSON(needs.setup.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
      - run: |
          git config user.email "bot@planima.se"
          git config user.name "Planibot"
          git config push.autoSetupRemote true
      - run: |
          git checkout -b chore/ruby-${{ matrix.value }} && \
          echo "${{ matrix.value }}" > .ruby-version && \
          git commit -am "New Ruby version" && \
          git push
